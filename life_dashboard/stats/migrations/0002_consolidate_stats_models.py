# Generated by Django 5.1.1 on 2025-09-20 07:48

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def migrate_data_forward(apps, schema_editor):
    """
    Migrate data from old core_stats and life_stats apps to new consolidated models.
    """
    # Get model references
    OldCoreStat = apps.get_model("core_stats", "CoreStat")
    OldLifeStat = apps.get_model("life_stats", "LifeStat")
    OldLifeStatCategory = apps.get_model("life_stats", "LifeStatCategory")

    NewCoreStat = apps.get_model("stats", "CoreStatModel")
    NewLifeStat = apps.get_model("stats", "LifeStatModel")
    NewLifeStatCategory = apps.get_model("stats", "LifeStatCategoryModel")

    # 1. Migrate LifeStatCategory data
    category_mapping = {}  # old_id -> new_name
    for old_category in OldLifeStatCategory.objects.all():
        # Create new category model (just for reference, we'll use CharField in LifeStat)
        new_category, created = NewLifeStatCategory.objects.get_or_create(
            name=old_category.name,
            defaults={
                "description": old_category.description,
                "icon": old_category.icon,
            },
        )
        category_mapping[old_category.id] = old_category.name

    # 2. Migrate CoreStat data
    for old_core_stat in OldCoreStat.objects.all():
        if not NewCoreStat.objects.filter(user=old_core_stat.user).exists():
            NewCoreStat.objects.create(
                user=old_core_stat.user,
                strength=old_core_stat.strength,
                endurance=old_core_stat.endurance,
                agility=old_core_stat.agility,
                intelligence=old_core_stat.intelligence,
                wisdom=old_core_stat.wisdom,
                charisma=old_core_stat.charisma,
                experience_points=old_core_stat.experience_points,
                level=old_core_stat.level,
                created_at=old_core_stat.created_at,
                updated_at=old_core_stat.updated_at,
            )

    # 3. Migrate LifeStat data
    for old_life_stat in OldLifeStat.objects.all():
        category_name = category_mapping.get(old_life_stat.category_id, "Unknown")

        # Check for duplicates (same user, category, name)
        if not NewLifeStat.objects.filter(
            user=old_life_stat.user,
            category_temp=category_name,
            name=old_life_stat.name,
        ).exists():
            NewLifeStat.objects.create(
                user=old_life_stat.user,
                category_temp=category_name,
                name=old_life_stat.name,
                value=old_life_stat.value,  # Convert float to decimal
                target=old_life_stat.target,
                unit=old_life_stat.unit,
                notes=old_life_stat.notes,
                last_updated=old_life_stat.last_updated,
                created_at=old_life_stat.created_at,
            )


def migrate_data_backward(apps, schema_editor):
    """
    Reverse migration: copy data back from consolidated models to original apps.
    """
    # Get model references
    OldCoreStat = apps.get_model("core_stats", "CoreStat")
    OldLifeStat = apps.get_model("life_stats", "LifeStat")
    OldLifeStatCategory = apps.get_model("life_stats", "LifeStatCategory")

    NewCoreStat = apps.get_model("stats", "CoreStatModel")
    NewLifeStat = apps.get_model("stats", "LifeStatModel")

    # 1. Restore LifeStatCategory data
    category_mapping = {}  # name -> category_obj
    for new_life_stat in NewLifeStat.objects.values("category").distinct():
        category_name = new_life_stat["category"]
        if category_name and category_name not in category_mapping:
            category_obj, created = OldLifeStatCategory.objects.get_or_create(
                name=category_name, defaults={"description": "", "icon": ""}
            )
            category_mapping[category_name] = category_obj

    # 2. Restore CoreStat data
    for new_core_stat in NewCoreStat.objects.all():
        if not OldCoreStat.objects.filter(user=new_core_stat.user).exists():
            OldCoreStat.objects.create(
                user=new_core_stat.user,
                strength=new_core_stat.strength,
                endurance=new_core_stat.endurance,
                agility=new_core_stat.agility,
                intelligence=new_core_stat.intelligence,
                wisdom=new_core_stat.wisdom,
                charisma=new_core_stat.charisma,
                experience_points=new_core_stat.experience_points,
                level=new_core_stat.level,
                created_at=new_core_stat.created_at,
                updated_at=new_core_stat.updated_at,
            )

    # 3. Restore LifeStat data
    for new_life_stat in NewLifeStat.objects.all():
        category_obj = category_mapping.get(new_life_stat.category_temp)
        if (
            category_obj
            and not OldLifeStat.objects.filter(
                user=new_life_stat.user, category=category_obj, name=new_life_stat.name
            ).exists()
        ):
            OldLifeStat.objects.create(
                user=new_life_stat.user,
                category=category_obj,
                name=new_life_stat.name,
                value=float(new_life_stat.value),  # Convert decimal to float
                target=float(new_life_stat.target) if new_life_stat.target else None,
                unit=new_life_stat.unit,
                notes=new_life_stat.notes,
                last_updated=new_life_stat.last_updated,
                created_at=new_life_stat.created_at,
            )


class Migration(migrations.Migration):
    dependencies = [
        ("stats", "0001_initial"),
        ("core_stats", "0001_initial"),  # Ensure core_stats exists
        ("life_stats", "0001_initial"),  # Ensure life_stats exists
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="LifeStatCategoryModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("description", models.TextField(blank=True)),
                ("icon", models.CharField(blank=True, max_length=50)),
            ],
            options={
                "verbose_name": "Life Stat Category",
                "verbose_name_plural": "Life Stat Categories",
                "db_table": "stats_lifestatcategory",
            },
        ),
        migrations.AlterModelOptions(
            name="stats",
            options={
                "verbose_name": "Stats (Legacy)",
                "verbose_name_plural": "Stats (Legacy)",
            },
        ),
        migrations.CreateModel(
            name="CoreStatModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("strength", models.IntegerField(default=10)),
                ("endurance", models.IntegerField(default=10)),
                ("agility", models.IntegerField(default=10)),
                ("intelligence", models.IntegerField(default=10)),
                ("wisdom", models.IntegerField(default=10)),
                ("charisma", models.IntegerField(default=10)),
                ("experience_points", models.IntegerField(default=0)),
                ("level", models.IntegerField(default=1)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="core_stats",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Core Stat",
                "verbose_name_plural": "Core Stats",
                "db_table": "stats_corestat",
            },
        ),
        migrations.CreateModel(
            name="LifeStatModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category_temp",
                    models.CharField(max_length=50),
                ),  # Temporary field for migration
                ("name", models.CharField(max_length=100)),
                (
                    "value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "target",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("unit", models.CharField(blank=True, max_length=20)),
                ("notes", models.TextField(blank=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="consolidated_life_stats",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Life Stat",
                "verbose_name_plural": "Life Stats",
                "db_table": "stats_lifestat",
                "unique_together": {("user", "category_temp", "name")},
            },
        ),
        migrations.CreateModel(
            name="StatHistoryModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("stat_type", models.CharField(max_length=20)),
                ("stat_name", models.CharField(max_length=100)),
                ("old_value", models.DecimalField(decimal_places=2, max_digits=10)),
                ("new_value", models.DecimalField(decimal_places=2, max_digits=10)),
                ("change_amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("change_reason", models.CharField(blank=True, max_length=200)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stat_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Stat History",
                "verbose_name_plural": "Stat Histories",
                "db_table": "stats_stathistory",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "stat_type", "stat_name"],
                        name="stats_stath_user_id_85d603_idx",
                    ),
                    models.Index(
                        fields=["user", "timestamp"],
                        name="stats_stath_user_id_a2b4e9_idx",
                    ),
                ],
            },
        ),
        # Data migration operation
        migrations.RunPython(
            migrate_data_forward, migrate_data_backward, hints={"target_db": "default"}
        ),
    ]
