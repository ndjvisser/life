"""
Django settings for life_dashboard project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import logging
import os
import sys
from datetime import timedelta
from pathlib import Path

import redis
from django.core.exceptions import ImproperlyConfigured
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-your-secret-key-here")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True") == "True"

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "crispy_forms",
    "crispy_bootstrap5",
    "life_dashboard.dashboard",
    "life_dashboard.quests",
    "life_dashboard.journals",
    "life_dashboard.achievements",
    "life_dashboard.skills",
    "life_dashboard.core_stats",
    "life_dashboard.life_stats",
    # Stats-related apps (consolidated)
    "life_dashboard.stats",  # Consolidated stats app with all models
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "life_dashboard.dashboard.middleware.LoginRequiredMiddleware",
]

ROOT_URLCONF = "life_dashboard.life_dashboard.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "life_dashboard.dashboard.context_processors.user_quests_and_habits",
            ],
        },
    },
]

WSGI_APPLICATION = "life_dashboard.life_dashboard.wsgi.application"
ASGI_APPLICATION = "life_dashboard.life_dashboard.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Test settings
if "test" in sys.argv:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": ":memory:",
        }
    }
    PASSWORD_HASHERS = [
        "django.contrib.auth.hashers.MD5PasswordHasher",
    ]
    AUTH_PASSWORD_VALIDATORS = []
    # Use base INSTALLED_APPS and MIDDLEWARE, only override if needed
    INSTALLED_APPS = INSTALLED_APPS.copy()
    MIDDLEWARE = MIDDLEWARE.copy()  # Keep LoginRequiredMiddleware for auth testing


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation."
        "UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR.parent, "life_dashboard", "static"),
]
STATIC_ROOT = os.path.join(BASE_DIR.parent, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Login/Logout URLs
LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "dashboard"
LOGOUT_REDIRECT_URL = "login"

TEST_RUNNER = "life_dashboard.life_dashboard.test_runner.PytestTestRunner"


# Celery Configuration
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://localhost:6379/0")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE

# Redis Configuration
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_DB = int(os.getenv("REDIS_DB", 0))
REDIS_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"


def validate_redis_connection(url: str, *, strict: bool) -> None:
    """Validate a Redis connection and optionally raise in strict mode."""

    client = None
    try:
        client = redis.from_url(url)
        client.ping()
    except redis.RedisError as exc:
        message = f"Redis connection failed for {url}: {exc}"
        if strict:
            raise ImproperlyConfigured(message) from exc
        logger.warning("%s", message)
    finally:
        if client is not None:
            try:
                client.close()
            except AttributeError:
                pass


# Validate Redis connectivity only in production environments
if not DEBUG:
    validate_redis_connection(CELERY_BROKER_URL, strict=True)
    if CELERY_RESULT_BACKEND.startswith("redis"):
        validate_redis_connection(CELERY_RESULT_BACKEND, strict=True)

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = {
    "run-daily-task": {
        "task": "life_dashboard.dashboard.tasks.daily_task",
        "schedule": timedelta(days=1),
    },
}

MESSAGE_TAGS = {
    "debug": "secondary",
    "info": "info",
    "success": "success",
    "warning": "warning",
    "error": "danger",
}
